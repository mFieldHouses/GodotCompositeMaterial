if (layer_%s_enabled == true) {
	vec2 uv1 = (UV + get_layer_uv_offset(%s, 0, UV) + layer_%s_uv1_offset) * layer_%s_uv1_scale;
	vec2 uv2 = (UV + get_layer_uv_offset(%s, 1, UV) + layer_%s_uv2_offset) * layer_%s_uv2_scale;

	int layer_%s_normal_uv_map_index = get_layer_map_uv_index(%s,0);
	int layer_%s_albedo_uv_map_index = get_layer_map_uv_index(%s,1);
	int layer_%s_occlusion_uv_map_index = get_layer_map_uv_index(%s,2);
	int layer_%s_roughness_uv_map_index = get_layer_map_uv_index(%s,3);
	int layer_%s_metallic_uv_map_index = get_layer_map_uv_index(%s,4);

	vec4 layer_%s_albedo_texture = texture(layer_%s_albedo, uv1 * float(layer_%s_albedo_uv_map_index == 0) + uv2 * float(layer_%s_albedo_uv_map_index == 1));
	vec2 layer_%s_occlusion_factor = texture(layer_%s_occlusion_map, uv1 * float(layer_%s_occlusion_uv_map_index == 0) + uv2 * float(layer_%s_occlusion_uv_map_index == 1)).ra * float(layer_%s_orm_mode) + texture(layer_%s_orm_map, uv1 * float(layer_%s_occlusion_uv_map_index == 0) + uv2 * float(layer_%s_occlusion_uv_map_index == 1)).ra * (1.0 - float(layer_%s_orm_mode));
	vec2 layer_%s_roughness_factor = texture(layer_%s_roughness_map, uv1 * float(layer_%s_roughness_uv_map_index == 0) + uv2 * float(layer_%s_roughness_uv_map_index == 1)).ra * float(layer_%s_orm_mode) + texture(layer_%s_orm_map, uv1 * float(layer_%s_roughness_uv_map_index == 0) + uv2 * float(layer_%s_roughness_uv_map_index == 1)).ga * (1.0 - float(layer_%s_orm_mode));
	vec2 layer_%s_metallic_factor = texture(layer_%s_metallic_map, uv1 * float(layer_%s_metallic_uv_map_index == 0) + uv2 * float(layer_%s_metallic_uv_map_index == 1)).ra * float(layer_%s_orm_mode) + texture(layer_%s_orm_map, uv1 * float(layer_%s_metallic_uv_map_index == 0) + uv2 * float(layer_%s_metallic_uv_map_index == 1)).ra * (1.0 - float(layer_%s_orm_mode));
	vec3 layer_%s_normal_map = texture(layer_%s_normal, uv1 * float(layer_%s_normal_uv_map_index == 0) + uv2 * float(layer_%s_normal_uv_map_index == 1)).rgb;

	int mask_A_uv_map_index = get_layer_map_uv_index(%s, 5);
	int mask_B_uv_map_index = get_layer_map_uv_index(%s, 6);

	float layer_%s_mask_factor = get_resulting_mask_for_layer(%s, uv1, uv2, local_vertex_normal, global_vertex_normal, local_vertex_pos, global_vertex_pos);
	albedo_mix = mix(albedo_mix, layer_%s_albedo_texture.rgb, layer_%s_mask_factor * layer_%s_albedo_texture.a);
	albedo_mix = mix(albedo_mix, vec3(layer_%s_mask_factor), float(layer_%s_consolidate_masks));

	occlusion_mix = mix(occlusion_mix, layer_%s_occlusion_factor.x, layer_%s_mask_factor * layer_%s_occlusion_factor.y);
	roughness_mix = mix(roughness_mix, layer_%s_roughness_factor.x, layer_%s_mask_factor * layer_%s_roughness_factor.y);
	metallic_mix = mix(metallic_mix, layer_%s_metallic_factor.x, layer_%s_mask_factor * layer_%s_metallic_factor.y);
	normal_mix = mix(normal_mix, layer_%s_normal_map, layer_%s_mask_factor * (1.0 - float(layer_%s_propagate_normals)));

	float alpha_factor = layer_%s_mask_factor * layer_%s_albedo_texture.a;
		if (ALPHA < alpha_factor) {
			ALPHA = alpha_factor;
		}
}